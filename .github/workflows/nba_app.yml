name: Python API Tests

on:
  schedule:
    - cron: '*/5 * * * *' # Every 5 minutes
  push:
    branches:
      - main
      - push-docker-hub
      - database_integration
  pull_request:
    branches:
      - main
      - push-docker-hub
      - database_integration

jobs:
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    env:
      PYTHONPATH: ./code
      DB_HOST: localhost
      DB_NAME: nba_db
      DB_USER: ubuntu
      DB_PASSWORD: mlops
      PREDICTION_SERVICE_HOST: localhost
      PREDICTION_SERVICE_PORT: 8001

    services:
      db:
        image: postgres:12-alpine
        env:
          POSTGRES_USER: ubuntu
          POSTGRES_PASSWORD: mlops
          POSTGRES_DB: nba_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U ubuntu; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done

      - name: Set up database
        run: |
          PGPASSWORD=mlops psql -h localhost -U ubuntu -d nba_db -f code/database/init.sql

      - name: Start prediction service
        run: |
          source venv/bin/activate
          nohup uvicorn code.api.prediction_service:app --host ${PREDICTION_SERVICE_HOST} --port ${PREDICTION_SERVICE_PORT} &

      - name: Wait for prediction service to be ready
        run: |
          echo "Waiting for prediction service to start..."
          sleep 10  # Adjust this time as needed
          
      - name: Run tests
        run: |
          source venv/bin/activate
          pytest -v code/tests

  docker-compose:
    name: Build Docker Compose
    runs-on: ubuntu-latest
#    needs: unit-tests  # Later we will uncomment this. For now we do this to run docker part faster

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Build and start Docker Compose
        run: |
          docker-compose -f docker-compose.yml up --build
        env:
          COMPOSE_PROJECT_NAME: nba_app

  push-to-dockerhub:
    name: Push Docker Compose to Docker Hub
    runs-on: ubuntu-latest
    needs: docker-compose

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKERHUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Get the short SHA for tagging
        id: vars
        run: echo "::set-output name=short_sha::$(git rev-parse --short HEAD)"

      - name: Get the current date for tagging
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%d')"

      - name: Tag and push Docker images
        run: |
          IMAGE_TAG=${{ steps.date.outputs.date }}-${{ steps.vars.outputs.short_sha }}
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}

          # Define services and images
          declare -A services_images
          services_images=(
            ["data_ingestion"]=$DOCKERHUB_USERNAME/data_ingestion
            ["data_processing"]=$DOCKERHUB_USERNAME/data_processing
            ["feature_engineering"]=$DOCKERHUB_USERNAME/feature_engineering
            ["model_training"]=$DOCKERHUB_USERNAME/model_training
            ["inference"]=$DOCKERHUB_USERNAME/inference
          )

          # Build, tag, and push each service image
          for service in "${!services_images[@]}"; do
            IMAGE_NAME=${services_images[$service]}
            docker-compose build ${service}
            docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:${IMAGE_TAG}
            docker push ${IMAGE_NAME}:${IMAGE_TAG}
            docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest
            docker push ${IMAGE_NAME}:latest
          done
