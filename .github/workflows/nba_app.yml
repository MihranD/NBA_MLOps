# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python API Tests

on:
  push:
    branches:
      - main
      - ci-pipeline
      - database_integration
  pull_request:
    branches:
      - main
      - ci-pipeline
      - database_integration

jobs:
  unit-tests:
    runs-on: ubuntu-latest

    env:
      PYTHONPATH: ./code
      DB_HOST: localhost
      DB_NAME: nba_db
      DB_USER: ubuntu
      DB_PASSWORD: mlops

    services:
      postgres:
        image: postgres:12  # Use the desired PostgreSQL version
        env:
          POSTGRES_USER: ubuntu
          POSTGRES_PASSWORD: mlops
          POSTGRES_DB: nba_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Set up database
        run: |
          source venv/bin/activate
          python code/database/setup_database.py

      - name: Run tests
        run: |
          source venv/bin/activate
          pytest -v code/tests

  docker-lint-and-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Hadolint
        run: ./install_hadolint.sh

      - name: Lint Dockerfiles
        run: |
          hadolint Dockerfile.data_ingestion
          hadolint Dockerfile.data_processing
          hadolint Dockerfile.feature_engineering
          hadolint Dockerfile.model_training
          hadolint Dockerfile.inference

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker images
        run: |
          docker build -t nba_app/data_ingestion -f Dockerfile.data_ingestion .
          docker build -t nba_app/data_processing -f Dockerfile.data_processing .
          docker build -t nba_app/feature_engineering -f Dockerfile.feature_engineering .
          docker build -t nba_app/model_training -f Dockerfile.model_training .
          docker build -t nba_app/inference -f Dockerfile.inference .

      - name: Run Docker Compose
        run: |
          docker-compose up -d

      - name: Functional checks for data_ingestion
        run: |
          docker-compose exec data_ingestion bash -c 'ls -l /app && [ -f /app/signal_data_ingestion_done ] && echo "Data Ingestion Completed" || (echo "Data Ingestion Failed" && exit 1)'

      - name: Functional checks for data_processing
        run: |
          docker-compose exec data_processing bash -c "[ -f /app/signal_data_processing_done ] && echo 'Data Processing Completed' || (echo 'Data Processing Failed' && exit 1)"

      - name: Functional checks for feature_engineering
        run: |
          docker-compose exec feature_engineering bash -c "[ -f /app/signal_feature_engineering_done ] && echo 'Feature Engineering Completed' || (echo 'Feature Engineering Failed' && exit 1)"

      - name: Functional checks for model_training
        run: |
          docker-compose exec model_training bash -c "[ -f /app/signal_model_training_done ] && echo 'Model Training Completed' || (echo 'Model Training Failed' && exit 1)"

      - name: Functional checks for inference
        run: |
          docker-compose exec inference bash -c "[ -f /app/signal_inference_done ] && echo 'Inference Completed' || (echo 'Inference Failed' && exit 1)"

      - name: Tear down Docker Compose
        run: docker-compose down
